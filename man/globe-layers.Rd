% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers.R
\name{add_points}
\alias{add_points}
\alias{add_markers}
\alias{add_labels}
\alias{add_lines}
\alias{add_polygons}
\alias{add_raster}
\title{Layers and geometries}
\usage{
add_points(
  globe,
  layer_id = NULL,
  id_var = NULL,
  time_var = NULL,
  constant_space = TRUE,
  color = czml_color("white"),
  size = czml_double(1),
  outline_color = czml_color("black"),
  outline_width = czml_double(1),
  height = 0,
  popup = czml_string(NULL),
  options = point_options(),
  interpolation = interpolation_options(),
  data = getGlobeData(globe),
  ...
)

add_markers(
  globe,
  layer_id = NULL,
  id_var = NULL,
  time_var = NULL,
  constant_space = TRUE,
  image_url = czml_url(),
  scale = czml_double(1),
  color = czml_color("white"),
  rotation = czml_double(0),
  height = 0,
  image_width = czml_double(),
  image_height = czml_double(),
  popup = czml_string(),
  options = marker_options(),
  interpolation = interpolation_options(),
  data = getGlobeData(globe),
  ...
)

add_labels(
  globe,
  layer_id = NULL,
  id_var = NULL,
  time_var = NULL,
  constant_space = TRUE,
  text = czml_string(),
  scale = czml_double(1),
  label_style = czml_label_style(),
  background_color = czml_color("#2a2a2aCC"),
  show_background = FALSE,
  fill_color = czml_color("white"),
  height = 0,
  popup = czml_string(),
  options = label_options(),
  interpolation = interpolation_options(),
  data = getGlobeData(globe),
  ...
)

add_lines(
  globe,
  layer_id = NULL,
  id_var = NULL,
  time_var = NULL,
  constant_space = TRUE,
  material = czml_solid_material(),
  arc_type = czml_arc_type(),
  width = czml_double(1),
  height = 0,
  popup = NULL,
  options = line_options(),
  data = getGlobeData(globe),
  ...
)

add_polygons(
  globe,
  layer_id = NULL,
  id_var = NULL,
  time_var = NULL,
  constant_space = TRUE,
  material = czml_solid_material(),
  outline_color = czml_color("black"),
  outline_width = czml_double(1),
  fill = TRUE,
  outline = TRUE,
  height = 0,
  extruded_height = 0,
  arc_type = czml_arc_type(),
  popup = NULL,
  options = polygon_options(),
  data = getGlobeData(globe),
  ...
)

add_raster(
  globe,
  layer_id = NULL,
  what = NULL,
  colors = "Spectral",
  probs = c(0.05, 0.95),
  stretch = "percent",
  data = getGlobeData(globe)
)
}
\arguments{
\item{globe}{the globe to modify}

\item{layer_id}{character used to name the layer, mandatory.}

\item{id_var}{character identifying a column in data which identifies
entities, mandatory.}

\item{time_var}{character vector identifying a column with timestemps
Must be convertible to POSIXct. Optional.}

\item{constant_space}{Logical, assume space to be constant over time, defaults
to TRUE.}

\item{color}{a color value}

\item{size}{a value to set the size of an entity}

\item{outline_color}{the color to draw the outline of an entity}

\item{outline_width}{the width of the outline of an entity}

\item{height}{A numeric expressing the height of entities in meters. If a
single value is supplied, it will be used for all entities. Can be a
vector with the same length as the number of rows in the data object.
If time_var is present, supply a formula determining the height of an
entity over its validity}

\item{popup}{A character string to be used in the info box of an entity. Can
be any valid HTML. Use \code{czml_string()} if you want it to vary over time.}

\item{options}{List of options supplied by the respective options function.}

\item{interpolation}{List of options for the interpolation of the spatial
position supplied by \code{interpolation_options()}.}

\item{data}{An sf object, either inherited from the globe object or
supplied to the respective function}

\item{...}{Additional arguments passed on to the entity packets as a list}

\item{image_url}{character, either the URL to a web resource, a local
file path, or a base64-encoded data URI}

\item{scale}{scales the size of an entity, values greater 1 enlarge it,
values smaller than 1 shrink it}

\item{rotation}{rotation of the entity in radians}

\item{image_width}{image width in pixels}

\item{image_height}{image height in pixels}

\item{text}{character, used as labels}

\item{label_style}{the style to fill the background of a label}

\item{background_color}{a color value for the background}

\item{show_background}{logical, if the background is filled}

\item{fill_color}{a color value for the label}

\item{material}{a czml_material used to render an entity}

\item{arc_type}{the type of arc used to draw lines}

\item{width}{a czml_double determining the width}

\item{fill}{logical, if the entity should be filled}

\item{outline}{logical, if the outline should be drawn}

\item{extruded_height}{similar to height, indicating the extruded
height of an entity based on its lower bound or in relation to the
ground, depending on the value of extruded_height_reference}

\item{what}{A numeric of character vector of length 1 or free to select the
attributes of the stars data object for plotting. If length is 1, the
the values will be mapped to a color scale based on the what is specified
in the colors argument. If length is 3, an RGB image is plotted and the
order of the elements specified which attrbibutes of the data object will
be mapped to which color channel}

\item{colors}{Either a function accepting pixel values and returning a color
code or the name of a color paletta to be used to color the raster image.}

\item{probs}{see \code{link{stars::st_rgb()}}, used only for RGB images}

\item{stretch}{see \code{link{stars::st_rgb()}} used only for RGB images}
}
\value{
A modified globe widget
}
\description{
Add layers to a globe accepting sf objects as input. A unique layer_id
has to be specified. Entities are identified by a column in the sf object
and can optionally vary over time. Properties are set with the respective
\code{czml_*()} functions and can be interpolated over time by supplying
formulas. Note, if a formula is supplied, the values will be resolved
based on the entity level if a time_var was specified. If you want
to set the property of an entitiy based on a data-set wide statistic you
will need to pre-compute it.
}
\section{Functions}{
\itemize{
\item \code{add_points()}: Adds point geometries to a globe

\item \code{add_markers()}: Adds markers to a globe

\item \code{add_labels()}: Adds labels to a globe

\item \code{add_lines()}: Adds lines to a globe

\item \code{add_polygons()}: Adds labels to a globe

\item \code{add_raster()}: Adds raster images to the globe

}}
